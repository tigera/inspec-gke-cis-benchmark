{
    "platform": {
        "name": "k8s",
        "release": "0.1.10",
        "target_id": "3601ad54-b299-50b3-9d79-eabc7452d3a0"
    },
    "profiles": [
        {
            "name": "inspec-gke-cis-k8s",
            "version": "0.1.0",
            "sha256": "4de3039f003fd15c2b19b5410b5c23bd294019b5582722cfa6a4f3863e1fa062",
            "title": "InSpec GKE CIS 1.1 Benchmark",
            "summary": "Inspec Google Kubernetes Engine Center for Internet Security Benchmark v1.1 Profile",
            "license": "Apache-2.0",
            "copyright": "Google",
            "copyright_email": "copyright@google.com",
            "supports": [
                {
                    "platform": "k8s"
                }
            ],
            "attributes": [
                {
                    "name": "gcp_project_id",
                    "options": {
                        "type": "String",
                        "value": "tigera-tesla"
                    }
                },
                {
                    "name": "cis_version",
                    "options": {
                        "type": "String",
                        "value": "1.1"
                    }
                },
                {
                    "name": "cis_url",
                    "options": {
                        "type": "String",
                        "value": "https://www.cisecurity.org/benchmark/kubernetes/"
                    }
                },
                {
                    "name": "gcp_gke_locations",
                    "options": {
                        "value": [
                            "us-central1"
                        ]
                    }
                },
                {
                    "name": "gce_zones",
                    "options": {
                        "value": [
                            "us-central1"
                        ]
                    }
                }
            ],
            "depends": [
                {
                    "name": "inspec-k8s",
                    "url": "https://github.com/bgeesaman/inspec-k8s/archive/0.1.3.tar.gz",
                    "status": "loaded"
                }
            ],
            "groups": [
                {
                    "id": "controls/4.02-pod-security-policies.rb",
                    "controls": [
                        "cis-gke-4.2.1-pod-security-policies",
                        "cis-gke-4.2.2-pod-security-policies",
                        "cis-gke-4.2.3-pod-security-policies",
                        "cis-gke-4.2.4-pod-security-policies",
                        "cis-gke-4.2.5-pod-security-policies",
                        "cis-gke-4.2.6-pod-security-policies",
                        "cis-gke-4.2.7-pod-security-policies",
                        "cis-gke-4.2.8-pod-security-policies",
                        "cis-gke-4.2.9-pod-security-policies"
                    ]
                },
                {
                    "id": "controls/4.03-network-policies-and-cni.rb",
                    "controls": [
                        "cis-gke-4.3.2-network-policies-and-cni"
                    ]
                }
            ],
            "controls": [
                {
                    "id": "cis-gke-4.2.1-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of privileged containers",
                    "desc": "Do not generally permit containers to be run with the securityContext.privileged flag\n  set to true.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run with the securityContext.privileged flag\n  set to true."
                        },
                        {
                            "label": "rationale",
                            "data": "Privileged containers have access to all Linux Kernel capabilities and devices. A container\n  running with full privileges can do almost everything that the host can do. This flag exists\n  to allow special use-cases, like manipulating the network stack and accessing devices.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  privileged containers.\n  If you need to run privileged containers, this should be defined in a separate PSP and you\n  should carefully check RBAC controls to ensure that only limited service accounts and\n  users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.1",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of privileged containers\"\n\n  desc 'Do not generally permit containers to be run with the securityContext.privileged flag\n  set to true.'\n  desc 'rationale', \"Privileged containers have access to all Linux Kernel capabilities and devices. A container\n  running with full privileges can do almost everything that the host can do. This flag exists\n  to allow special use-cases, like manipulating the network stack and accessing devices.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  privileged containers.\n  If you need to run privileged containers, this should be defined in a separate PSP and you\n  should carefully check RBAC controls to ensure that only limited service accounts and\n  users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_non_privileged_policy = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      has_non_privileged_policy = true if pod_security_policy.item.spec.privileged != true\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_non_privileged_policy }\n      it 'have a non-privileged policy' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 26,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a non-privileged policy",
                            "run_time": 0.001727952,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.2-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers wishing to share the host\n  process ID namespace",
                    "desc": "Do not generally permit containers to be run with the hostPID flag set to true.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run with the hostPID flag set to true."
                        },
                        {
                            "label": "rationale",
                            "data": "A container running in the host's PID namespace can inspect processes running outside the\n  container. If the container also has access to ptrace capabilities this can be used to escalate\n  privileges outside of the container.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to share the host PID namespace.\n  If you need to run containers which require hostPID, this should be defined in a separate\n  PSP and you should carefully check RBAC controls to ensure that only limited service\n  accounts and users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.2",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers wishing to share the host\n  process ID namespace\"\n\n  desc 'Do not generally permit containers to be run with the hostPID flag set to true.'\n  desc 'rationale', \"A container running in the host's PID namespace can inspect processes running outside the\n  container. If the container also has access to ptrace capabilities this can be used to escalate\n  privileges outside of the container.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to share the host PID namespace.\n  If you need to run containers which require hostPID, this should be defined in a separate\n  PSP and you should carefully check RBAC controls to ensure that only limited service\n  accounts and users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_host_pid_disabled = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      has_host_pid_disabled = true if pod_security_policy.item.spec.hostPID != true\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_host_pid_disabled }\n      it 'have a policy with hostPID not enabled' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 73,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a policy with hostPID not enabled",
                            "run_time": 0.000120021,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.3-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers wishing to share the host\n  IPC namespace",
                    "desc": "Do not generally permit containers to be run with the hostIPC flag set to true.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run with the hostIPC flag set to true."
                        },
                        {
                            "label": "rationale",
                            "data": "A container running in the host's IPC namespace can use IPC to interact with processes\n  outside the container.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to share the host IPC namespace.\n  If you have a requirement to containers which require hostIPC, this should be defined in a\n  separate PSP and you should carefully check RBAC controls to ensure that only limited\n  service accounts and users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.3",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers wishing to share the host\n  IPC namespace\"\n\n  desc 'Do not generally permit containers to be run with the hostIPC flag set to true.'\n  desc 'rationale', \"A container running in the host's IPC namespace can use IPC to interact with processes\n  outside the container.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to share the host IPC namespace.\n  If you have a requirement to containers which require hostIPC, this should be defined in a\n  separate PSP and you should carefully check RBAC controls to ensure that only limited\n  service accounts and users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_host_ipc_disabled = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      has_host_ipc_disabled = true if pod_security_policy.item.spec.hostIPC != true\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_host_ipc_disabled }\n      it 'have a policy with hostIPC not enabled' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 120,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a policy with hostIPC not enabled",
                            "run_time": 6.5986e-05,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.4-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers wishing to share the host\n  network namespace",
                    "desc": "Do not generally permit containers to be run with the hostNetwork flag set to true.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run with the hostNetwork flag set to true."
                        },
                        {
                            "label": "rationale",
                            "data": "A container running in the host's network namespace could access the local loopback\n  device, and could access network traffic to and from other pods.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to share the host network namespace.\n  If you have need to run containers which require hostNetwork, this should be defined in a\n  separate PSP and you should carefully check RBAC controls to ensure that only limited\n  service accounts and users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.4",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers wishing to share the host\n  network namespace\"\n\n  desc 'Do not generally permit containers to be run with the hostNetwork flag set to true.'\n  desc 'rationale', \"A container running in the host's network namespace could access the local loopback\n  device, and could access network traffic to and from other pods.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to share the host network namespace.\n  If you have need to run containers which require hostNetwork, this should be defined in a\n  separate PSP and you should carefully check RBAC controls to ensure that only limited\n  service accounts and users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_host_network_disabled = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      has_host_network_disabled = true if pod_security_policy.item.spec.hostNetwork != true\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_host_network_disabled }\n      it 'have a policy with hostNetwork not enabled' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 166,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "failed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a policy with hostNetwork not enabled",
                            "run_time": 0.016421164,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "message": "\nexpected true\n     got false\n",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.5-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers with\n  allowPrivilegeEscalation",
                    "desc": "Do not generally permit containers to be run with the allowPrivilegeEscalation flag set\n  to true.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run with the allowPrivilegeEscalation flag set\n  to true."
                        },
                        {
                            "label": "rationale",
                            "data": "A container running with the allowPrivilegeEscalation flag set to true may have\n  processes that can gain more privileges than their parent.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to allow privilege escalation. The option exists (and is defaulted to true) to\n  permit setuid binaries to run.\n  If you have need to run containers which use setuid binaries or require privilege escalation,\n  this should be defined in a separate PSP and you should carefully check RBAC controls to\n  ensure that only limited service accounts and users are given permission to access that\n  PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.5",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers with\n  allowPrivilegeEscalation\"\n\n  desc 'Do not generally permit containers to be run with the allowPrivilegeEscalation flag set\n  to true.'\n  desc 'rationale', \"A container running with the allowPrivilegeEscalation flag set to true may have\n  processes that can gain more privileges than their parent.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  containers to allow privilege escalation. The option exists (and is defaulted to true) to\n  permit setuid binaries to run.\n  If you have need to run containers which use setuid binaries or require privilege escalation,\n  this should be defined in a separate PSP and you should carefully check RBAC controls to\n  ensure that only limited service accounts and users are given permission to access that\n  PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_privilege_escalation_disabled = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      has_privilege_escalation_disabled = true if pod_security_policy.item.spec.allowPrivilegeEscalation != true\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_privilege_escalation_disabled }\n      it 'have a policy with allowPrivilegeEscalation not enabled' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 212,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a policy with allowPrivilegeEscalation not enabled",
                            "run_time": 0.000267917,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.6-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of root containers",
                    "desc": "Do not generally permit containers to be run as the root user.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run as the root user."
                        },
                        {
                            "label": "rationale",
                            "data": "Containers may run as any Linux user. Containers which run as the root user, whilst\n  constrained by Container Runtime security features still have a escalated likelihood of\n  container breakout.\n  Ideally, all containers should run as a defined non-UID 0 user.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit root\n  users in a container.\n  If you need to run root containers, this should be defined in a separate PSP and you should\n  carefully check RBAC controls to ensure that only limited service accounts and users are\n  given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 2,
                        "cis_gke": "4.2.6",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of root containers\"\n\n  desc 'Do not generally permit containers to be run as the root user.'\n  desc 'rationale', \"Containers may run as any Linux user. Containers which run as the root user, whilst\n  constrained by Container Runtime security features still have a escalated likelihood of\n  container breakout.\n  Ideally, all containers should run as a defined non-UID 0 user.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit root\n  users in a container.\n  If you need to run root containers, this should be defined in a separate PSP and you should\n  carefully check RBAC controls to ensure that only limited service accounts and users are\n  given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 2\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n\n    has_root_user_disabled = true\n    pod_security_policies.each do |pod_security_policy_item|\n      has_root_user_disabled = true\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      if pod_security_policy.item.spec.runAsUser.rule == 'MustRunAs'\n        pod_security_policy.item.spec.runAsUser.ranges.each do |range|\n          has_root_user_disabled = false if range.min.zero?\n        end\n      elsif pod_security_policy.item.spec.runAsUser.rule == 'RunAsAny'\n        has_root_user_disabled = false\n      end\n      break if has_root_user_disabled == true\n    end\n\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_root_user_disabled }\n      it 'have a policy which does not allow container to run as root user' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 261,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a policy which does not allow container to run as root user",
                            "run_time": 0.00016107,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.7-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers with the NET_RAW\n  capability",
                    "desc": "Do not generally permit containers with the potentially dangerous NET_RAW capability.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers with the potentially dangerous NET_RAW capability."
                        },
                        {
                            "label": "rationale",
                            "data": "Containers run with a default set of capabilities as assigned by the Container Runtime. By\n  default this can include potentially dangerous capabilities. With Docker as the container\n  runtime the NET_RAW capability is enabled which may be misused by malicious\n  containers.\n  Ideally, all containers should drop this capability.\n  There should be at least one PodSecurityPolicy (PSP) defined which prevents containers\n  with the NET_RAW capability from launching.\n  If you need to run containers with this capability, this should be defined in a separate PSP\n  and you should carefully check RBAC controls to ensure that only limited service accounts\n  and users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.7",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers with the NET_RAW\n  capability\"\n\n  desc 'Do not generally permit containers with the potentially dangerous NET_RAW capability.'\n  desc 'rationale', \"Containers run with a default set of capabilities as assigned by the Container Runtime. By\n  default this can include potentially dangerous capabilities. With Docker as the container\n  runtime the NET_RAW capability is enabled which may be misused by malicious\n  containers.\n  Ideally, all containers should drop this capability.\n  There should be at least one PodSecurityPolicy (PSP) defined which prevents containers\n  with the NET_RAW capability from launching.\n  If you need to run containers with this capability, this should be defined in a separate PSP\n  and you should carefully check RBAC controls to ensure that only limited service accounts\n  and users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_req_capabilities_dropped = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      next if pod_security_policy.item.spec.requiredDropCapabilities.nil?\n      has_req_capabilities_dropped = true if pod_security_policy.item.spec.requiredDropCapabilities.include? 'ALL'\n      has_req_capabilities_dropped = true if pod_security_policy.item.spec.requiredDropCapabilities.include? 'NET_RAW'\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_req_capabilities_dropped }\n      it 'have a policy with requiredDropCapabilities to include either ALL or NET_RAW' do\n        expect(subject).to be true\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 318,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies have a policy with requiredDropCapabilities to include either ALL or NET_RAW",
                            "run_time": 0.000162514,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.8-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers with added capabilities",
                    "desc": "Do not generally permit containers with capabilities assigned beyond the default set.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers with capabilities assigned beyond the default set."
                        },
                        {
                            "label": "rationale",
                            "data": "Containers run with a default set of capabilities as assigned by the Container Runtime.\n  Capabilities outside this set can be added to containers which could expose them to risks of\n  container breakout attacks.\n  There should be at least one PodSecurityPolicy (PSP) defined which prevents containers\n  with capabilities beyond the default set from launching.\n  If you need to run containers with additional capabilities, this should be defined in a\n  separate PSP and you should carefully check RBAC controls to ensure that only limited\n  service accounts and users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 1,
                        "cis_gke": "4.2.8",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers with added capabilities\"\n\n  desc 'Do not generally permit containers with capabilities assigned beyond the default set.'\n  desc 'rationale', \"Containers run with a default set of capabilities as assigned by the Container Runtime.\n  Capabilities outside this set can be added to containers which could expose them to risks of\n  container breakout attacks.\n  There should be at least one PodSecurityPolicy (PSP) defined which prevents containers\n  with capabilities beyond the default set from launching.\n  If you need to run containers with additional capabilities, this should be defined in a\n  separate PSP and you should carefully check RBAC controls to ensure that only limited\n  service accounts and users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 1\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    has_added_capabilities = false\n    pod_security_policies.each do |pod_security_policy_item|\n      pod_security_policy = k8sobject(api: pod_security_policies_api, type: 'podsecuritypolicies', name: pod_security_policy_item.name)\n      next if pod_security_policy.item.spec.allowedCapabilities.nil?\n      if pod_security_policy.item.spec.allowedCapabilities.count.positive?\n        has_added_capabilities = true\n        break\n      end\n    end\n    describe \"[#{gcp_project_id}] Pod Security Policies\" do\n      subject { has_added_capabilities }\n      it 'not have a policy which has non-empty allowedCapabilities' do\n        expect(subject).to be false\n      end\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 369,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "passed",
                            "code_desc": "[tigera-tesla] Pod Security Policies not have a policy which has non-empty allowedCapabilities",
                            "run_time": 0.000411547,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Pod Security Policies"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.2.9-pod-security-policies",
                    "title": "[POD-SECURITY-POLICIES] Minimize the admission of containers with capabilities assigned",
                    "desc": "Do not generally permit containers with capabilities.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers with capabilities."
                        },
                        {
                            "label": "rationale",
                            "data": "Containers run with a default set of capabilities as assigned by the Container Runtime.\n  Capabilities are parts of the rights generally granted on a Linux system to the root user.\n  In many cases applications running in containers do not require any capabilities to operate,\n  so from the perspective of the principal of least privilege use of capabilities should be\n  minimized."
                        }
                    ],
                    "impact": 0.0,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": false,
                        "cis_level": 2,
                        "cis_gke": "4.2.9",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of containers with capabilities assigned\"\n\n  desc 'Do not generally permit containers with capabilities.'\n  desc 'rationale', \"Containers run with a default set of capabilities as assigned by the Container Runtime.\n  Capabilities are parts of the rights generally granted on a Linux system to the root user.\n  In many cases applications running in containers do not require any capabilities to operate,\n  so from the perspective of the principal of least privilege use of capabilities should be\n  minimized.\"\n\n  tag cis_scored: false\n  tag cis_level: 2\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://www.nccgroup.trust/uk/our-research/abusing-privileged-and-unprivileged-linux-containers/'\n\n  if pod_security_policies.count.zero?\n    impact 'none'\n    describe 'GKE Cluster does not have any PodSecurityPolicies, this test is Not Applicable.' do\n      skip 'GKE Cluster does not have any PodSecurityPolicies.'\n    end\n  else\n    impact 'none'\n    describe 'For each PSP, check whether capabilities have been forbidden. This test needs to be performed manually.' do\n      skip 'This test needs to be performed manually.'\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 419,
                        "ref": "inspec-gke-cis-k8s/controls/4.02-pod-security-policies.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "skipped",
                            "code_desc": "For each PSP, check whether capabilities have been forbidden. This test needs to be performed manually.",
                            "run_time": 1.9969e-05,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "resource": "",
                            "skip_message": "This test needs to be performed manually.",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "For each PSP, check whether capabilities have been forbidden. This test needs to be performed manually.",
                            "fix": "N/A"
                        }
                    ]
                },
                {
                    "id": "cis-gke-4.3.2-network-policies-and-cni",
                    "title": "[NETWORK-POLICIES-AND-CNI] Minimize the admission of privileged containers",
                    "desc": "Do not generally permit containers to be run with the securityContext.privileged flag\n  set to true.",
                    "descriptions": [
                        {
                            "label": "default",
                            "data": "Do not generally permit containers to be run with the securityContext.privileged flag\n  set to true."
                        },
                        {
                            "label": "rationale",
                            "data": "Privileged containers have access to all Linux Kernel capabilities and devices. A container\n  running with full privileges can do almost everything that the host can do. This flag exists\n  to allow special use-cases, like manipulating the network stack and accessing devices.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  privileged containers.\n  If you need to run privileged containers, this should be defined in a separate PSP and you\n  should carefully check RBAC controls to ensure that only limited service accounts and\n  users are given permission to access that PSP."
                        }
                    ],
                    "impact": 0.4,
                    "refs": [
                        {
                            "url": "https://www.cisecurity.org/benchmark/kubernetes/",
                            "ref": "CIS Benchmark"
                        },
                        {
                            "url": "https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies",
                            "ref": "GCP Docs"
                        }
                    ],
                    "tags": {
                        "cis_scored": true,
                        "cis_level": 2,
                        "cis_gke": "4.3.2",
                        "cis_version": "1.1",
                        "project": "tigera-tesla"
                    },
                    "code": "control \"cis-gke-#{sub_control_id}-#{control_abbrev}\" do\n  impact 'medium'\n\n  title \"[#{control_abbrev.upcase}] Minimize the admission of privileged containers\"\n\n  desc 'Do not generally permit containers to be run with the securityContext.privileged flag\n  set to true.'\n  desc 'rationale', \"Privileged containers have access to all Linux Kernel capabilities and devices. A container\n  running with full privileges can do almost everything that the host can do. This flag exists\n  to allow special use-cases, like manipulating the network stack and accessing devices.\n  There should be at least one PodSecurityPolicy (PSP) defined which does not permit\n  privileged containers.\n  If you need to run privileged containers, this should be defined in a separate PSP and you\n  should carefully check RBAC controls to ensure that only limited service accounts and\n  users are given permission to access that PSP.\"\n\n  tag cis_scored: true\n  tag cis_level: 2\n  tag cis_gke: sub_control_id.to_s\n  tag cis_version: cis_version.to_s\n  tag project: gcp_project_id.to_s\n\n  ref 'CIS Benchmark', url: cis_url.to_s\n  ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy/#enabling-pod-security-policies'\n\n  namespaces = []\n  k8sobjects(api: 'v1', type: 'namespaces').items.each do |namespace_k8s|\n    namespaces.push(namespace_k8s.name) unless %w[kube-node-lease kube-public kube-system].include?(namespace_k8s.name)\n  end\n\n  has_network_policy = true\n  namespaces.each do |namespace|\n    if k8sobjects(api: 'networking.k8s.io/v1', type: 'networkpolicies', namespace: namespace).items.count.zero?\n      has_network_policy = false\n      break\n    end\n  end\n\n  describe \"[#{gcp_project_id}] Network Policies\" do\n    subject { has_network_policy }\n    it 'exist for each Namespace in the cluster' do\n      expect(subject).to be true\n    end\n  end\nend\n",
                    "source_location": {
                        "line": 23,
                        "ref": "inspec-gke-cis-k8s/controls/4.03-network-policies-and-cni.rb"
                    },
                    "waiver_data": {},
                    "results": [
                        {
                            "status": "failed",
                            "code_desc": "[tigera-tesla] Network Policies exist for each Namespace in the cluster",
                            "run_time": 0.000639515,
                            "start_time": "2023-04-11T15:29:08+00:00",
                            "message": "\nexpected true\n     got false\n",
                            "resource_class": "Object",
                            "resource_params": "[]",
                            "resource_id": "[tigera-tesla] Network Policies",
                            "fix": "Not applicable, we will not use managed GKE Network policy."
                        }
                    ]
                }
            ],
            "status": "loaded",
            "status_message": ""
        },
        {
            "name": "inspec-k8s",
            "version": "0.1.3",
            "sha256": "8b83c8f27649d14068f8c0037e67adbd4629eb9d80f92dc2ea1909380ef0672d",
            "title": "InSpec Profile",
            "maintainer": "Brad Geesaman",
            "summary": "An InSpec Kubernetes Resource Pack",
            "license": "Apache-2.0",
            "copyright": "Brad Geesaman",
            "copyright_email": "bradgeesaman@gmail.com",
            "supports": [
                {
                    "platform": "k8s"
                }
            ],
            "attributes": [
                {
                    "name": "gcp_project_id",
                    "options": {
                        "value": "tigera-tesla"
                    }
                },
                {
                    "name": "gcp_gke_locations",
                    "options": {
                        "value": [
                            "us-central1"
                        ]
                    }
                },
                {
                    "name": "gce_zones",
                    "options": {
                        "value": [
                            "us-central1"
                        ]
                    }
                }
            ],
            "parent_profile": "inspec-gke-cis-k8s",
            "groups": [],
            "controls": [],
            "status": "loaded",
            "status_message": ""
        }
    ],
    "statistics": {
        "duration": 0.093481499
    },
    "version": "5.18.14"
}
