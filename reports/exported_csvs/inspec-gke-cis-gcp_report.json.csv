Results Set,Status,ID,Title,Description,Descriptions,Impact,Severity,Code,Check,Fix,800-53 Controls,CCI IDs,Results,Waived,Waiver Data
inspec-gke-cis-gcp_report.json,Not Applicable,cis-gke-5.1.1-container-registry,[CONTAINER-REGISTRY] Ensure Image Vulnerability Scanning using GCR Container Analysis or a third party provider,Scan images stored in Google Container Registry (GCR) for vulnerabilities.,"default: Scan images stored in Google Container Registry (GCR) for vulnerabilities.

rationale: Vulnerabilities in software packages can be exploited by hackers or malicious users to
  obtain unauthorized access to local cloud resources. GCR Container Analysis and other
  third party products allow images stored in GCR to be scanned for known vulnerabilities.

",0,none,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
  impact 'none'

  title ""[#{control_abbrev.upcase}] Ensure Image Vulnerability Scanning using GCR Container Analysis or a third party provider""

  desc 'Scan images stored in Google Container Registry (GCR) for vulnerabilities.'
  desc 'rationale', ""Vulnerabilities in software packages can be exploited by hackers or malicious users to
  obtain unauthorized access to local cloud resources. GCR Container Analysis and other
  third party products allow images stored in GCR to be scanned for known vulnerabilities.""

  tag cis_scored: true
  tag cis_level: 1
  tag cis_gke: sub_control_id.to_s
  tag cis_version: cis_version.to_s
  tag project: gcp_project_id.to_s

  ref 'CIS Benchmark', url: cis_url.to_s
  ref 'GCP Docs', url: 'https://cloud.google.com/container-registry/docs/container-analysis'

  if google_project_service(project: gcp_project_id, name: 'containerregistry.googleapis.com').state == 'DISABLED'
    impact 'none'
    describe ""[#{gcp_project_id}] This project does not have the Google Container Registry Service enabled, this test is Not Applicable."" do
      skip ""[#{gcp_project_id}] This project does not have the Google Container Registry Service enabled.""
    end
  else
    describe ""[#{gcp_project_id}]"" do
      subject { google_project_service(project: gcp_project_id, name: 'containerscanning.googleapis.com') }
      its('state') { should cmp 'ENABLED' }
    end
  end
end",,,UM-1,,"FAILED -- Test: [tigera-tesla] state is expected to cmp == ""ENABLED""
Message: 
expected: ENABLED
     got: DISABLED

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.1.2-container-registry,[CONTAINER-REGISTRY] Minimize user access to GCR,"Restrict user access to GCR, limiting interaction with build images to only authorized
  personnel and service accounts.","default: Restrict user access to GCR, limiting interaction with build images to only authorized
  personnel and service accounts.

rationale: Weak access control to GCR may allow malicious users to replace built images with
  vulnerable or backdoored containers.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
  impact 'medium'

  title ""[#{control_abbrev.upcase}] Minimize user access to GCR""

  desc 'Restrict user access to GCR, limiting interaction with build images to only authorized
  personnel and service accounts.'
  desc 'rationale', ""Weak access control to GCR may allow malicious users to replace built images with
  vulnerable or backdoored containers.""

  tag cis_scored: false
  tag cis_level: 1
  tag cis_gke: sub_control_id.to_s
  tag cis_version: cis_version.to_s
  tag project: gcp_project_id.to_s

  ref 'CIS Benchmark', url: cis_url.to_s
  ref 'GCP Docs', url: 'https://cloud.google.com/container-registry/docs/access-control'

  # Check if storage bucket exists
  if google_storage_bucket(name: ""artifacts.#{gcp_project_id}.appspot.com"").name.nil?
    impact 'none'
    describe ""[#{gcp_project_id}] does not have a storage bucket for Google Container Registry Images, this test is Not Applicable."" do
      skip ""[#{gcp_project_id}] does not have a storage bucket for Google Container Registry Images.""
    end
  else
    bucket_iam_policy = google_storage_bucket_iam_policy(bucket: ""artifacts.#{gcp_project_id}.appspot.com"")
    bucket_iam_policy.bindings.each do |iam_policy|
      case iam_policy.role
      when 'roles/storage.admin'
        role_member_list = registry_storage_admin_list
      when 'roles/storage.objectAdmin'
        role_member_list = registry_storage_object_admin_list
      when 'roles/storage.objectCreator'
        role_member_list = registry_storage_object_creator_list
      when 'roles/storage.legacyBucketOwner'
        role_member_list = registry_storage_legacy_bucket_owner_list
      when 'roles/storage.legacyBucketWriter'
        role_member_list = registry_storage_legacy_bucket_writer_list
      when 'roles/storage.legacyObjectOwner'
        role_member_list = registry_storage_legacy_object_owner_list
      else
        next
      end
      describe ""[#{gcp_project_id}] Members for #{iam_policy.role} in Storage Bucket artifacts.#{gcp_project_id}.appspot.com"" do
        subject { google_storage_bucket_iam_binding(bucket: ""artifacts.#{gcp_project_id}.appspot.com"", role: iam_policy.role) }
        it 'match the allow list' do
          expect(subject.members).to cmp(role_member_list)
        end
      end
    end
  end
end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Members for roles/storage.legacyBucketOwner in Storage Bucket artifacts.tigera-tesla.appspot.com match the allow list
Message: 
expected: [""""]
     got: [""projectEditor:tigera-tesla"", ""projectOwner:tigera-tesla""]

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Not Applicable,cis-gke-5.1.3-container-registry,[CONTAINER-REGISTRY] Minimize cluster access to read-only for GCR,Configure the Cluster Service Account with Storage Object Viewer Role to only allow read-only access to GCR.,"default: Configure the Cluster Service Account with Storage Object Viewer Role to only allow read-only access to GCR.

rationale: The Cluster Service Account does not require administrative access to GCR, only requiring
  pull access to containers to deploy onto GKE. Restricting permissions follows the principles
  of least privilege and prevents credentials from being abused beyond the required role.

",0,none,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
  impact 'none'

  title ""[#{control_abbrev.upcase}] Minimize cluster access to read-only for GCR""

  desc 'Configure the Cluster Service Account with Storage Object Viewer Role to only allow read-only access to GCR.'
  desc 'rationale', ""The Cluster Service Account does not require administrative access to GCR, only requiring
  pull access to containers to deploy onto GKE. Restricting permissions follows the principles
  of least privilege and prevents credentials from being abused beyond the required role.""

  tag cis_scored: false
  tag cis_level: 1
  tag cis_gke: sub_control_id.to_s
  tag cis_version: cis_version.to_s
  tag project: gcp_project_id.to_s

  ref 'CIS Benchmark', url: cis_url.to_s
  ref 'GCP Docs', url: 'https://cloud.google.com/container-registry/docs/container-analysis'

  if gke_clusters.nil? || gke_clusters.count.zero?
    impact 'none'
    describe ""[#{gcp_project_id}] does not have any GKE clusters, this test is Not Applicable."" do
      skip ""[#{gcp_project_id}] does not have any GKE clusters.""
    end
  elsif google_storage_bucket(name: ""artifacts.#{gcp_project_id}.appspot.com"").name.nil?
    impact 'none'
    describe ""[#{gcp_project_id}] does not have a storage bucket for Google Container Registry Images, this test is Not Applicable."" do
      skip ""[#{gcp_project_id}] does not have a storage bucket for Google Container Registry Images.""
    end
  else
    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        nodepool_sa = google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname).config.service_account

        # 1st check: Make sure that nodepool service account does not have any role other than storage.objectViewer assigned
        google_storage_bucket_iam_bindings(bucket: ""artifacts.#{gcp_project_id}.appspot.com"").iam_binding_roles.each do |iam_binding_role|
          next if iam_binding_role == 'roles/storage.objectViewer'
          describe ""[#{gcp_project_id}] IAM Binding of role #{iam_binding_role} on Storage Bucket artifacts.#{gcp_project_id}.appspot.com"" do
            subject { google_storage_bucket_iam_binding(bucket: ""artifacts.#{gcp_project_id}.appspot.com"", role: iam_binding_role) }
            its('members') { should_not include ""serviceAccount:#{nodepool_sa}"" }
          end
        end

        # 2nd check: Make sure that nodepool service account has role storage.objectViewer assigned
        iam_binding_object_viewer = google_storage_bucket_iam_binding(bucket: ""artifacts.#{gcp_project_id}.appspot.com"", role: 'roles/storage.objectViewer')
        describe ""[#{gcp_project_id}] IAM Binding of role roles/storage.objectViewer on Storage Bucket artifacts.#{gcp_project_id}.appspot.com"" do
          subject { iam_binding_object_viewer }
          it { should exist }
        end
        next if iam_binding_object_viewer.members.nil?
        describe ""[#{gcp_project_id}] IAM Binding of role roles/storage.objectViewer on Storage Bucket artifacts.#{gcp_project_id}.appspot.com"" do
          subject { iam_binding_object_viewer }
          its('members') { should include ""serviceAccount:#{nodepool_sa}"" }
        end
      end
    end
  end
end",,,UM-1,,"PASSED -- Test: [tigera-tesla] IAM Binding of role roles/storage.legacyBucketOwner on Storage Bucket artifacts.tigera-tesla.appspot.com members is expected not to include ""serviceAccount:operations@tigera-tesla.iam.gserviceaccount.com""

PASSED -- Test: [tigera-tesla] IAM Binding of role roles/storage.legacyBucketReader on Storage Bucket artifacts.tigera-tesla.appspot.com members is expected not to include ""serviceAccount:operations@tigera-tesla.iam.gserviceaccount.com""

FAILED -- Test: [tigera-tesla] IAM Binding of role roles/storage.objectViewer on Storage Bucket artifacts.tigera-tesla.appspot.com is expected to exist
Message: expected Bucket IamBinding artifacts.tigera-tesla.appspot.com Role: roles/storage.objectViewer to exist

PASSED -- Test: [tigera-tesla] IAM Binding of role roles/storage.legacyBucketOwner on Storage Bucket artifacts.tigera-tesla.appspot.com members is expected not to include ""serviceAccount:default""

PASSED -- Test: [tigera-tesla] IAM Binding of role roles/storage.legacyBucketReader on Storage Bucket artifacts.tigera-tesla.appspot.com members is expected not to include ""serviceAccount:default""

FAILED -- Test: [tigera-tesla] IAM Binding of role roles/storage.objectViewer on Storage Bucket artifacts.tigera-tesla.appspot.com is expected to exist
Message: expected Bucket IamBinding artifacts.tigera-tesla.appspot.com Role: roles/storage.objectViewer to exist

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.1.4-container-registry,[CONTAINER-REGISTRY] Minimize Container Registries to only those approved,Use Binary Authorization to allowlist only approved container registries.,"default: Use Binary Authorization to allowlist only approved container registries.

rationale: Allowing unrestricted access to external container registries provides the opportunity for
  malicious or unapproved containers to be deployed into the cluster. Allowlisting only
  approved container registries reduces this risk.
  See also Recommendation 6.10.5.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
  impact 'medium'

  title ""[#{control_abbrev.upcase}] Minimize Container Registries to only those approved""

  desc 'Use Binary Authorization to allowlist only approved container registries.'
  desc 'rationale', ""Allowing unrestricted access to external container registries provides the opportunity for
  malicious or unapproved containers to be deployed into the cluster. Allowlisting only
  approved container registries reduces this risk.
  See also Recommendation 6.10.5.""

  tag cis_scored: false
  tag cis_level: 2
  tag cis_gke: sub_control_id.to_s
  tag cis_version: cis_version.to_s
  tag project: gcp_project_id.to_s

  ref 'CIS Benchmark', url: cis_url.to_s
  ref 'GCP Docs', url: 'https://cloud.google.com/binary-authorization/'

  gke_clusters.each do |gke_cluster|
    describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
      subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
      its('binary_authorization.enabled') { should cmp true }
      # TODO: Implement check for ""Allow all policy"" (currently no method available with inspec-gcp)
    end
  end
end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 binary_authorization.enabled is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.2.1-iam,[IAM] Ensure GKE clusters are not running using the Compute Engine default service account,Create and use minimally privileged Service accounts to run GKE cluster nodes instead of using the Compute Engine default Service account. Unnecessary permissions could be abused in the case of a node compromise.,"default: Create and use minimally privileged Service accounts to run GKE cluster nodes instead of using the Compute Engine default Service account. Unnecessary permissions could be abused in the case of a node compromise.

rationale: A GCP service account (as distinct from a Kubernetes ServiceAccount) is an identity that an instance or an application can use to run GCP API requests on your behalf. This identity is used to identify virtual machine instances to other Google Cloud Platform services. By default, Kubernetes Engine nodes use the Compute Engine default service account. This account has broad access by default, as defined by access scopes, making it useful to a wide variety of applications on the VM, but it has more permissions than are required to run your Kubernetes Engine cluster.

You should create and use a minimally privileged service account to run your Kubernetes Engine cluster instead of using the Compute Engine default service account, and create separate service accounts for each Kubernetes Workload (See Recommendation 6.2.2).

Kubernetes Engine requires, at a minimum, the node service account to have the monitoring.viewer, monitoring.metricWriter, and logging.logWriter roles. Additional roles may need to be added for the nodes to pull images from GCR.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

control ""cis-gke-#{control_id}-#{control_abbrev}"" do
  impact 'medium'

  title ""[#{control_abbrev.upcase}] Ensure GKE clusters are not running using the Compute Engine default service account""

  desc 'Create and use minimally privileged Service accounts to run GKE cluster nodes instead of using the Compute Engine default Service account. Unnecessary permissions could be abused in the case of a node compromise.'
  desc 'rationale', ""A GCP service account (as distinct from a Kubernetes ServiceAccount) is an identity that an instance or an application can use to run GCP API requests on your behalf. This identity is used to identify virtual machine instances to other Google Cloud Platform services. By default, Kubernetes Engine nodes use the Compute Engine default service account. This account has broad access by default, as defined by access scopes, making it useful to a wide variety of applications on the VM, but it has more permissions than are required to run your Kubernetes Engine cluster.

You should create and use a minimally privileged service account to run your Kubernetes Engine cluster instead of using the Compute Engine default service account, and create separate service accounts for each Kubernetes Workload (See Recommendation 6.2.2).

Kubernetes Engine requires, at a minimum, the node service account to have the monitoring.viewer, monitoring.metricWriter, and logging.logWriter roles. Additional roles may need to be added for the nodes to pull images from GCR.""

  tag cis_scored: true
  tag cis_level: 1
  tag cis_gke: control_id.to_s
  tag cis_version: cis_version.to_s
  tag project: gcp_project_id.to_s

  ref 'CIS Benchmark', url: cis_url.to_s
  ref 'GCP Docs', url: 'https://cloud.google.com/compute/docs/access/service-accounts#compute_engine_default_service_account'

  if gke_clusters.nil? || gke_clusters.count.zero?
    impact 'none'
    describe ""[#{gcp_project_id}] does not have any GKE clusters, this test is Not Applicable."" do
      skip ""[#{gcp_project_id}] does not have any GKE clusters.""
    end
  else
    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}/#{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('config.service_account') { should_not cmp 'default' }
        end
      end
    end
  end
end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01/pool-1 config.service_account is expected not to cmp == ""default""

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.3-networking,"[NETWORKING] Ensure Kubernetes Secrets are encrypted using keys managed in
    Cloud KMS","Encrypt Kubernetes secrets, stored in etcd, at the application-layer using a customer-
    managed key in Cloud KMS.","default: Encrypt Kubernetes secrets, stored in etcd, at the application-layer using a customer-
    managed key in Cloud KMS.

rationale: By default, GKE encrypts customer content stored at rest, including Secrets. GKE handles
    and manages this default encryption for you without any additional action on your part.
    Application-layer Secrets Encryption provides an additional layer of security for sensitive
    data, such as user defined Secrets and Secrets required for the operation of the cluster,
    such as service account keys, which are all stored in etcd.
    Using this functionality, you can use a key, that you manage in Cloud KMS, to encrypt data
    at the application layer. This protects against attackers in the event that they manage to
    gain access to etcd.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Kubernetes Secrets are encrypted using keys managed in
    Cloud KMS""

    desc ""Encrypt Kubernetes secrets, stored in etcd, at the application-layer using a customer-
    managed key in Cloud KMS.""
    desc 'rationale', ""By default, GKE encrypts customer content stored at rest, including Secrets. GKE handles
    and manages this default encryption for you without any additional action on your part.
    Application-layer Secrets Encryption provides an additional layer of security for sensitive
    data, such as user defined Secrets and Secrets required for the operation of the cluster,
    such as service account keys, which are all stored in etcd.
    Using this functionality, you can use a key, that you manage in Cloud KMS, to encrypt data
    at the application layer. This protects against attackers in the event that they manage to
    gain access to etcd.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/encrypting-secrets'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('database_encryption.key_name') { should_not eq nil }
        its('database_encryption.state') { should cmp 'ENCRYPTED' }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 database_encryption.key_name is expected not to eq nil
Message: 
expected: value != nil
     got: nil

(compared using ==)


FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 database_encryption.state is expected to cmp == ""ENCRYPTED""
Message: 
expected: ENCRYPTED
     got: DECRYPTED

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.4.1-node-metadata,[NODE-METADATA] Ensure legacy Compute Engine instance metadata APIs are Disabled,"Disable the legacy GCE instance metadata APIs for GKE nodes. Under some circumstances, these can be used from within a pod to extract the node's credentials.","default: Disable the legacy GCE instance metadata APIs for GKE nodes. Under some circumstances, these can be used from within a pod to extract the node's credentials.

rationale: The legacy GCE metadata endpoint allows simple HTTP requests to be made returning
    sensitive information. To prevent the enumeration of metadata endpoints and data
    exfiltration, the legacy metadata endpoint must be disabled.

    Without requiring a custom HTTP header when accessing the legacy GCE metadata
    endpoint, a flaw in an application that allows an attacker to trick the code into retrieving
    the contents of an attacker-specified web URL could provide a simple method for
    enumeration and potential credential exfiltration. By requiring a custom HTTP header, the
    attacker needs to exploit an application flaw that allows them to control the URL and also
    add custom headers in order to carry out this attack successfully.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure legacy Compute Engine instance metadata APIs are Disabled""

    desc ""Disable the legacy GCE instance metadata APIs for GKE nodes. Under some circumstances, these can be used from within a pod to extract the node's credentials.""
    desc 'rationale', ""The legacy GCE metadata endpoint allows simple HTTP requests to be made returning
    sensitive information. To prevent the enumeration of metadata endpoints and data
    exfiltration, the legacy metadata endpoint must be disabled.

    Without requiring a custom HTTP header when accessing the legacy GCE metadata
    endpoint, a flaw in an application that allows an attacker to trick the code into retrieving
    the contents of an attacker-specified web URL could provide a simple method for
    enumeration and potential credential exfiltration. By requiring a custom HTTP header, the
    attacker needs to exploit an application flaw that allows them to control the URL and also
    add custom headers in order to carry out this attack successfully.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/protecting-cluster-metadata#disable-legacy-apis'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        nodepool = google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname)
        has_legacy_endpoints_disabled = nodepool.config.metadata['disable-legacy-endpoints']
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { nodepool }
          it 'should have legacy endpoints disabled.' do
            expect(has_legacy_endpoints_disabled).to cmp 'true'
          end
        end
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 should have legacy endpoints disabled.

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.4.2-node-metadata,[NODE-METADATA] Ensure the GKE Metadata Server is Enabled,"Running the GKE Metadata Server prevents workloads from accessing sensitive instance
    metadata and facilitates Workload Identity","default: Running the GKE Metadata Server prevents workloads from accessing sensitive instance
    metadata and facilitates Workload Identity

rationale: Every node stores its metadata on a metadata server. Some of this metadata, such as
    kubelet credentials and the VM instance identity token, is sensitive and should not be
    exposed to a Kubernetes workload. Enabling the GKE Metadata server prevents pods (that
    are not running on the host network) from accessing this metadata and facilitates
    Workload Identity.
    When unspecified, the default setting allows running pods to have full access to the node's
    underlying metadata server.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure the GKE Metadata Server is Enabled""

    desc ""Running the GKE Metadata Server prevents workloads from accessing sensitive instance
    metadata and facilitates Workload Identity""
    desc 'rationale', ""Every node stores its metadata on a metadata server. Some of this metadata, such as
    kubelet credentials and the VM instance identity token, is sensitive and should not be
    exposed to a Kubernetes workload. Enabling the GKE Metadata server prevents pods (that
    are not running on the host network) from accessing this metadata and facilitates
    Workload Identity.
    When unspecified, the default setting allows running pods to have full access to the node's
    underlying metadata server.""

    tag cis_scored: true
    tag cis_level: 2
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/protecting-cluster-metadata#concealment'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('config.workload_meta_config.mode') { should be_in %w[GCE_METADATA GKE_METADATA] }
        end
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 config.workload_meta_config.mode is expected to be in ""GCE_METADATA"" and ""GKE_METADATA""
Message: expected `` to be in the list: `[""GCE_METADATA"", ""GKE_METADATA""]`

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.5.1-nodes,[NODES] Ensure Container-Optimized OS (COS) is used for GKE node images,"Use Container-Optimized OS (COS) as a managed, optimized and hardened base OS that limits the host's attack surface.","default: Use Container-Optimized OS (COS) as a managed, optimized and hardened base OS that limits the host's attack surface.

rationale: COS is an operating system image for Compute Engine VMs optimized for running containers. With COS, you can bring up your containers on Google Cloud Platform quickly, efficiently, and securely.

  Using COS as the node image provides the following benefits:

  - Run containers out of the box: COS instances come pre-installed with the container runtime and cloud-init. With a COS instance, you can bring up your container at the same time you create your VM, with no on-host setup required.
  - Smaller attack surface: COS has a smaller footprint, reducing your instance's potential attack surface.
  - Locked-down by default: COS instances include a locked-down firewall and other security settings by default.

",0.1,low,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'low'

    title ""[#{control_abbrev.upcase}] Ensure Container-Optimized OS (COS) is used for GKE node images""

    desc ""Use Container-Optimized OS (COS) as a managed, optimized and hardened base OS that limits the host's attack surface.""
    desc 'rationale', ""COS is an operating system image for Compute Engine VMs optimized for running containers. With COS, you can bring up your containers on Google Cloud Platform quickly, efficiently, and securely.

  Using COS as the node image provides the following benefits:

  - Run containers out of the box: COS instances come pre-installed with the container runtime and cloud-init. With a COS instance, you can bring up your container at the same time you create your VM, with no on-host setup required.
  - Smaller attack surface: COS has a smaller footprint, reducing your instance's potential attack surface.
  - Locked-down by default: COS instances include a locked-down firewall and other security settings by default.""

    tag cis_scored: true
    tag cis_level: 2
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/concepts/node-images'
    ref 'GCP Docs', url: 'https://cloud.google.com/container-optimized-os/docs/'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('config.image_type') { should match(/COS/) }
        end
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 config.image_type is expected to match /COS/

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.5.2-nodes,[NODES] Ensure Node Auto-Repair is enabled for GKE nodes,Nodes in a degraded state are an unknown quantity and so may pose a security risk.,"default: Nodes in a degraded state are an unknown quantity and so may pose a security risk.

rationale: Kubernetes Engine's node auto-repair feature helps you keep the nodes in your cluster in a healthy, running state. When enabled, Kubernetes Engine makes periodic checks on the health state of each node in your cluster. If a node fails consecutive health checks over an extended time period, Kubernetes Engine initiates a repair process for that node.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Node Auto-Repair is enabled for GKE nodes""

    desc 'Nodes in a degraded state are an unknown quantity and so may pose a security risk.'
    desc 'rationale', ""Kubernetes Engine's node auto-repair feature helps you keep the nodes in your cluster in a healthy, running state. When enabled, Kubernetes Engine makes periodic checks on the health state of each node in your cluster. If a node fails consecutive health checks over an extended time period, Kubernetes Engine initiates a repair process for that node.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-repair'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('management.auto_repair') { should cmp true }
        end
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 management.auto_repair is expected to cmp == true

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.5.3-nodes,[NODES] Ensure Node Auto-Upgrade is enabled for GKE nodes,Node auto-upgrade keeps nodes at the current Kubernetes and OS security patch level to mitigate known vulnerabilities.,"default: Node auto-upgrade keeps nodes at the current Kubernetes and OS security patch level to mitigate known vulnerabilities.

rationale: Node auto-upgrade helps you keep the nodes in your cluster or Node pool up to date with the latest stable patch version of Kubernetes as well as the underlying node operating system. Node auto-upgrade uses the same update mechanism as manual node upgrades.

  Node pools with node auto-upgrade enabled are automatically scheduled for upgrades when a new stable Kubernetes version becomes available. When the upgrade is performed, the Node pool is upgraded to match the current cluster master version. From a security perspective, this has the benefit of applying security updates automatically to the Kubernetes Engine when security fixes are released.

",0.1,low,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'low'

    title ""[#{control_abbrev.upcase}] Ensure Node Auto-Upgrade is enabled for GKE nodes""

    desc 'Node auto-upgrade keeps nodes at the current Kubernetes and OS security patch level to mitigate known vulnerabilities.'
    desc 'rationale', ""Node auto-upgrade helps you keep the nodes in your cluster or Node pool up to date with the latest stable patch version of Kubernetes as well as the underlying node operating system. Node auto-upgrade uses the same update mechanism as manual node upgrades.

  Node pools with node auto-upgrade enabled are automatically scheduled for upgrades when a new stable Kubernetes version becomes available. When the upgrade is performed, the Node pool is upgraded to match the current cluster master version. From a security perspective, this has the benefit of applying security updates automatically to the Kubernetes Engine when security fixes are released.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('management.auto_upgrade') { should cmp true }
        end
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 management.auto_upgrade is expected to cmp == true

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.5.4-nodes,"[NODES] When creating New Clusters - Automate GKE version management
    using Release Channels","Subscribe to the Regular or Stable Release Channel to automate version upgrades to the
    GKE cluster and to reduce version management complexity to the number of features and
    level of stability required.","default: Subscribe to the Regular or Stable Release Channel to automate version upgrades to the
    GKE cluster and to reduce version management complexity to the number of features and
    level of stability required.

rationale: Release Channels signal a graduating level of stability and production-readiness. These are
    based on observed performance of GKE clusters running that version and represent
    experience and confidence in the cluster version.
    The Regular release channel upgrades every few weeks and is for production users who
    need features not yet offered in the Stable channel. These versions have passed internal
    validation, but don't have enough historical data to guarantee their stability. Known issues
    generally have known workarounds.
    The Stable release channel upgrades every few months and is for production users who
    need stability above all else, and for whom frequent upgrades are too risky. These versions
    have passed internal validation and have been shown to be stable and reliable in
    production, based on the observed performance of those clusters.
    Critical security patches are delivered to all release channels.

",0.1,low,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'low'

    title ""[#{control_abbrev.upcase}] When creating New Clusters - Automate GKE version management
    using Release Channels""

    desc 'Subscribe to the Regular or Stable Release Channel to automate version upgrades to the
    GKE cluster and to reduce version management complexity to the number of features and
    level of stability required.'
    desc 'rationale', ""Release Channels signal a graduating level of stability and production-readiness. These are
    based on observed performance of GKE clusters running that version and represent
    experience and confidence in the cluster version.
    The Regular release channel upgrades every few weeks and is for production users who
    need features not yet offered in the Stable channel. These versions have passed internal
    validation, but don't have enough historical data to guarantee their stability. Known issues
    generally have known workarounds.
    The Stable release channel upgrades every few months and is for production users who
    need stability above all else, and for whom frequent upgrades are too risky. These versions
    have passed internal validation and have been shown to be stable and reliable in
    production, based on the observed performance of those clusters.
    Critical security patches are delivered to all release channels.""

    tag cis_scored: false
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('release_channel.channel') { should be_in %w[STABLE REGULAR] }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 release_channel.channel is expected to be in ""STABLE"" and ""REGULAR""
Message: expected `` to be in the list: `[""STABLE"", ""REGULAR""]`

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.5.5-nodes,[NODES] Ensure Shielded GKE Nodes are Enabled,"Shielded GKE Nodes provides verifiable integrity via secure boot, virtual trusted platform
    module (vTPM)-enabled measured boot, and integrity monitoring.","default: Shielded GKE Nodes provides verifiable integrity via secure boot, virtual trusted platform
    module (vTPM)-enabled measured boot, and integrity monitoring.

rationale: Shielded GKE nodes protects clusters against boot- or kernel-level malware or rootkits
    which persist beyond infected OS.
    Shielded GKE nodes run firmware which is signed and verified using Google's Certificate
    Authority, ensuring that the nodes' firmware is unmodified and establishing the root of
    trust for Secure Boot. GKE node identity is strongly protected via virtual Trusted Platform
    Module (vTPM) and verified remotely by the master node before the node joins the cluster.
    Lastly, GKE node integrity (i.e., boot sequence and kernel) is measured and can be
    monitored and verified remotely.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Shielded GKE Nodes are Enabled""

    desc 'Shielded GKE Nodes provides verifiable integrity via secure boot, virtual trusted platform
    module (vTPM)-enabled measured boot, and integrity monitoring.'
    desc 'rationale', ""Shielded GKE nodes protects clusters against boot- or kernel-level malware or rootkits
    which persist beyond infected OS.
    Shielded GKE nodes run firmware which is signed and verified using Google's Certificate
    Authority, ensuring that the nodes' firmware is unmodified and establishing the root of
    trust for Secure Boot. GKE node identity is strongly protected via virtual Trusted Platform
    Module (vTPM) and verified remotely by the master node before the node joins the cluster.
    Lastly, GKE node integrity (i.e., boot sequence and kernel) is measured and can be
    monitored and verified remotely.""

    tag cis_scored: false
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('shielded_nodes.enabled') { should cmp true }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 shielded_nodes.enabled is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.5.6-nodes,[NODES] Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled,"Enable Integrity Monitoring for Shielded GKE Nodes to be notified of inconsistencies during
    the node boot sequence.","default: Enable Integrity Monitoring for Shielded GKE Nodes to be notified of inconsistencies during
    the node boot sequence.

rationale: Integrity Monitoring provides active alerting for Shielded GKE nodes which allows
    administrators to respond to integrity failures and prevent compromised nodes from being
    deployed into the cluster.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Integrity Monitoring for Shielded GKE Nodes is Enabled""

    desc 'Enable Integrity Monitoring for Shielded GKE Nodes to be notified of inconsistencies during
    the node boot sequence.'
    desc 'rationale', ""Integrity Monitoring provides active alerting for Shielded GKE nodes which allows
    administrators to respond to integrity failures and prevent compromised nodes from being
    deployed into the cluster.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke-nodes#system_integrity_monitoring'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('config.shielded_instance_config.enable_integrity_monitoring') { should cmp true }
        end
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 config.shielded_instance_config.enable_integrity_monitoring is expected to cmp == true

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.5.7-nodes,[NODES] Ensure Secure Boot for Shielded GKE Nodes is Enabled,"Enable Secure Boot for Shielded GKE Nodes to verify the digital signature of node boot
    components.","default: Enable Secure Boot for Shielded GKE Nodes to verify the digital signature of node boot
    components.

rationale: An attacker may seek to alter boot components to persist malware or root kits during
    system initialisation. Secure Boot helps ensure that the system only runs authentic
    software by verifying the digital signature of all boot components, and halting the boot
    process if signature verification fails.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Secure Boot for Shielded GKE Nodes is Enabled""

    desc 'Enable Secure Boot for Shielded GKE Nodes to verify the digital signature of node boot
    components.'
    desc 'rationale', ""An attacker may seek to alter boot components to persist malware or root kits during
    system initialisation. Secure Boot helps ensure that the system only runs authentic
    software by verifying the digital signature of all boot components, and halting the boot
    process if signature verification fails.""

    tag cis_scored: true
    tag cis_level: 2
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/shielded-gke-nodes#secure_boot'

    gke_clusters.each do |gke_cluster|
      google_container_node_pools(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name]).node_pool_names.each do |nodepoolname|
        describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}, Node Pool: #{nodepoolname}"" do
          subject { google_container_node_pool(project: gcp_project_id, location: gke_cluster[:location], cluster_name: gke_cluster[:cluster_name], nodepool_name: nodepoolname) }
          its('config.shielded_instance_config.enable_secure_boot') { should cmp true }
        end
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01, Node Pool: pool-1 config.shielded_instance_config.enable_secure_boot is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.6-networking,[NETWORKING] Ensure use of VPC-native clusters,Create Alias IPs for the node network CIDR range in order to subsequently configure IP- based policies and firewalling for pods. A cluster that uses Alias IPs is called a 'VPC-native' cluster.,"default: Create Alias IPs for the node network CIDR range in order to subsequently configure IP- based policies and firewalling for pods. A cluster that uses Alias IPs is called a 'VPC-native' cluster.

rationale: Using Alias IPs has several benefits:

  - Pod IPs are reserved within the network ahead of time, which prevents conflict with other compute resources.
  - The networking layer can perform anti-spoofing checks to ensure that egress traffic is not sent with arbitrary source IPs.
  - Firewall controls for Pods can be applied separately from their nodes.
  - Alias IPs allow Pods to directly access hosted services without using a NAT gateway.

",0.1,low,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{control_id}-#{control_abbrev}"" do
    impact 'low'

    title ""[#{control_abbrev.upcase}] Enable VPC Flow Logs and Intranode Visibility""

    desc ""Enable VPC Flow Logs and Intranode Visibility to see pod-level traffic, even for traffic
    within a worker node.""
    desc 'rationale', ""Enabling Intranode Visibility makes your intranode pod to pod traffic visible to the
    networking fabric. With this feature, you can use VPC Flow Logs or other VPC features for
    intranode traffic.""

    tag cis_scored: true
    tag cis_level: 2
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/intranode-visibility'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('network_config.enable_intra_node_visibility') { should cmp true }
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 ip_allocation_policy.use_ip_aliases is expected to cmp == true

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.6.3-networking,[NETWORKING] Ensure Master Authorized Networks is Enabled,Enable Master Authorized Networks to restrict access to the cluster's control plane (master endpoint) to only an allowlist of authorized IPs.,"default: Enable Master Authorized Networks to restrict access to the cluster's control plane (master endpoint) to only an allowlist of authorized IPs.

rationale: Authorized networks are a way of specifying a restricted range of IP addresses that are permitted to access your cluster's control plane. Kubernetes Engine uses both Transport Layer Security (TLS) and authentication to provide secure access to your cluster's control plane from the public internet. This provides you the flexibility to administer your cluster from anywhere; however, you might want to further restrict access to a set of IP addresses that you control. You can set this restriction by specifying an authorized network.

  Master Authorized Networks blocks untrusted IP addresses. Google Cloud Platform IPs (such as traffic from Compute Engine VMs) can reach your master through HTTPS provided that they have the necessary Kubernetes credentials.

  Restricting access to an authorized network can provide additional security benefits for your container cluster, including:

  - Better protection from outsider attacks: Authorized networks provide an additional layer of security by limiting external, non-GCP access to a specific set of addresses you designate, such as those that originate from your premises. This helps protect access to your cluster in the case of a vulnerability in the cluster's authentication or authorization mechanism.

  - Better protection from insider attacks: Authorized networks help protect your cluster from accidental leaks of master certificates from your company's premises. Leaked certificates used from outside GCP and outside the authorized IP ranges (for example, from addresses outside your company) are still denied access.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Master Authorized Networks is Enabled""

    desc ""Enable Master Authorized Networks to restrict access to the cluster's control plane (master endpoint) to only an allowlist of authorized IPs.""
    desc 'rationale', ""Authorized networks are a way of specifying a restricted range of IP addresses that are permitted to access your cluster's control plane. Kubernetes Engine uses both Transport Layer Security (TLS) and authentication to provide secure access to your cluster's control plane from the public internet. This provides you the flexibility to administer your cluster from anywhere; however, you might want to further restrict access to a set of IP addresses that you control. You can set this restriction by specifying an authorized network.

  Master Authorized Networks blocks untrusted IP addresses. Google Cloud Platform IPs (such as traffic from Compute Engine VMs) can reach your master through HTTPS provided that they have the necessary Kubernetes credentials.

  Restricting access to an authorized network can provide additional security benefits for your container cluster, including:

  - Better protection from outsider attacks: Authorized networks provide an additional layer of security by limiting external, non-GCP access to a specific set of addresses you designate, such as those that originate from your premises. This helps protect access to your cluster in the case of a vulnerability in the cluster's authentication or authorization mechanism.

  - Better protection from insider attacks: Authorized networks help protect your cluster from accidental leaks of master certificates from your company's premises. Leaked certificates used from outside GCP and outside the authorized IP ranges (for example, from addresses outside your company) are still denied access.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/authorized-networks'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('master_authorized_networks_config.cidr_blocks') { should_not be_empty }
        its('master_authorized_networks_config.cidr_blocks.to_s') { should_not match %r{0.0.0.0/0} }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 master_authorized_networks_config.cidr_blocks is expected not to be empty
Message: expected nil to respond to `empty?`

PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 master_authorized_networks_config.cidr_blocks.to_s is expected not to match /0.0.0.0\/0/

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.6.4-networking,[NETWORKING] Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled,Disable access to the Kubernetes API from outside the node network if it is not required.,"default: Disable access to the Kubernetes API from outside the node network if it is not required.

rationale: In a private cluster, the master node has two endpoints, a private and public endpoint. The private endpoint is the internal IP address of the master, behind an internal load balancer in the master's VPC network. Nodes communicate with the master using the private endpoint. The public endpoint enables the Kubernetes API to be accessed from outside the master's VPC network.

  Although Kubernetes API requires an authorized token to perform sensitive actions, a vulnerability could potentially expose the Kubernetes publically with unrestricted access. Additionally, an attacker may be able to identify the current cluster and Kubernetes API version and determine whether it is vulnerable to an attack. Unless required, disabling public endpoint will help prevent such threats, and require the attacker to be on the master's VPC network to perform any attack on the Kubernetes API.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure clusters are created with Private Endpoint Enabled and Public Access Disabled""

    desc 'Disable access to the Kubernetes API from outside the node network if it is not required.'
    desc 'rationale', ""In a private cluster, the master node has two endpoints, a private and public endpoint. The private endpoint is the internal IP address of the master, behind an internal load balancer in the master's VPC network. Nodes communicate with the master using the private endpoint. The public endpoint enables the Kubernetes API to be accessed from outside the master's VPC network.

  Although Kubernetes API requires an authorized token to perform sensitive actions, a vulnerability could potentially expose the Kubernetes publically with unrestricted access. Additionally, an attacker may be able to identify the current cluster and Kubernetes API version and determine whether it is vulnerable to an attack. Unless required, disabling public endpoint will help prevent such threats, and require the attacker to be on the master's VPC network to perform any attack on the Kubernetes API.""

    tag cis_scored: true
    tag cis_level: 2
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('private_cluster_config.enable_private_endpoint') { should cmp true }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 private_cluster_config.enable_private_endpoint is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.6.5-networking,[NETWORKING] Ensure clusters are created with Private Nodes,"Disable public IP addresses for cluster nodes, so that they only have private IP addresses. Private Nodes are nodes with no public IP addresses.","default: Disable public IP addresses for cluster nodes, so that they only have private IP addresses. Private Nodes are nodes with no public IP addresses.

rationale: Disabling public IP addresses on cluster nodes restricts access to only internal networks, forcing attackers to obtain local network access before attempting to compromise the underlying Kubernetes hosts.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure clusters are created with Private Nodes""

    desc 'Disable public IP addresses for cluster nodes, so that they only have private IP addresses. Private Nodes are nodes with no public IP addresses.'
    desc 'rationale', 'Disabling public IP addresses on cluster nodes restricts access to only internal networks, forcing attackers to obtain local network access before attempting to compromise the underlying Kubernetes hosts.'

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/private-clusters'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('private_cluster_config.enable_private_nodes') { should cmp true }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 private_cluster_config.enable_private_nodes is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.6.7-networking,[NETWORKING] Ensure Network policy is enabled on Kubernetes Engine Clusters,A network policy is a specification of how groups of pods are allowed to communicate with each other and other network endpoints. NetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods. The Kubernetes Network Policy API allows the cluster administrator to specify what pods are allowed to communicate with each other.,"default: A network policy is a specification of how groups of pods are allowed to communicate with each other and other network endpoints. NetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods. The Kubernetes Network Policy API allows the cluster administrator to specify what pods are allowed to communicate with each other.

rationale: By default, pods are non-isolated; they accept traffic from any source. Pods become isolated by having a NetworkPolicy that selects them. Once there is any NetworkPolicy in a namespace selecting a particular pod, that pod will reject any connections that are not allowed by any NetworkPolicy. (Other pods in the namespace that are not selected by any NetworkPolicy will continue to accept all traffic.)

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Network policy is enabled on Kubernetes Engine Clusters""

    desc 'A network policy is a specification of how groups of pods are allowed to communicate with each other and other network endpoints. NetworkPolicy resources use labels to select pods and define rules which specify what traffic is allowed to the selected pods. The Kubernetes Network Policy API allows the cluster administrator to specify what pods are allowed to communicate with each other.'
    desc 'rationale', 'By default, pods are non-isolated; they accept traffic from any source. Pods become isolated by having a NetworkPolicy that selects them. Once there is any NetworkPolicy in a namespace selecting a particular pod, that pod will reject any connections that are not allowed by any NetworkPolicy. (Other pods in the namespace that are not selected by any NetworkPolicy will continue to accept all traffic.)'

    tag cis_scored: false
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/services-networking/network-policies/#the-networkpolicy-resource'
    ref 'GCP Docs', url: 'https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#networkpolicy-v1-networking'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('network_policy.enabled') { should cmp true }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 network_policy.enabled is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.7.1-logging,[LOGGING] Ensure Stackdriver Kubernetes Logging and Monitoring is Enabled,Send logs and metrics to a remote aggregator to mitigate the risk of local tampering in the event of a breach.,"default: Send logs and metrics to a remote aggregator to mitigate the risk of local tampering in the event of a breach.

rationale: Exporting logs and metrics to a dedicated, persistent datastore such as Stackdriver ensures availability of audit data following a cluster security event, and provides a central location for analysis of log and metric data collated from multiple sources.

  Currently, there are two mutually exclusive variants of Stackdriver available for use with GKE clusters: Legacy Stackdriver Support and Stackdriver Kubernetes Engine Monitoring Support.

  Although Stackdriver Kubernetes Engine Monitoring is the preferred option, starting with GKE versions 1.12.7 and 1.13, Legacy Stackdriver is the default option up through GKE version 1.13. The use of either of these services is sufficient to pass the benchmark recommendation.

  However, note that as Legacy Stackdriver Support is not getting any improvements and lacks features present in Stackdriver Kubernetes Engine Monitoring, Legacy Stackdriver Support may be deprecated in favour of Stackdriver Kubernetes Engine Monitoring Support in future versions of this benchmark.

",0.1,low,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{control_id}-#{control_abbrev}"" do
    impact 'low'

    title ""[#{control_abbrev.upcase}] Ensure Stackdriver Kubernetes Logging and Monitoring is Enabled""

    desc 'Send logs and metrics to a remote aggregator to mitigate the risk of local tampering in the event of a breach.'
    desc 'rationale', ""Exporting logs and metrics to a dedicated, persistent datastore such as Stackdriver ensures availability of audit data following a cluster security event, and provides a central location for analysis of log and metric data collated from multiple sources.

  Currently, there are two mutually exclusive variants of Stackdriver available for use with GKE clusters: Legacy Stackdriver Support and Stackdriver Kubernetes Engine Monitoring Support.

  Although Stackdriver Kubernetes Engine Monitoring is the preferred option, starting with GKE versions 1.12.7 and 1.13, Legacy Stackdriver is the default option up through GKE version 1.13. The use of either of these services is sufficient to pass the benchmark recommendation.

  However, note that as Legacy Stackdriver Support is not getting any improvements and lacks features present in Stackdriver Kubernetes Engine Monitoring, Legacy Stackdriver Support may be deprecated in favour of Stackdriver Kubernetes Engine Monitoring Support in future versions of this benchmark.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-container-cluster'
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/logging'
    ref 'GCP Docs', url: 'https://cloud.google.com/logging/docs/basic-concepts'

    # if gke_clusters.members.nil? || gke_clusters.members.count.zero?

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('logging_service') { should match(/^logging.googleapis.com/) }
        its('monitoring_service') { should match(/^monitoring.googleapis.com/) }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 logging_service is expected to match /^logging.googleapis.com/
Message: expected ""none"" to match /^logging.googleapis.com/
Diff:
@@ -1 +1 @@
-/^logging.googleapis.com/
+""none""


FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 monitoring_service is expected to match /^monitoring.googleapis.com/
Message: expected ""none"" to match /^monitoring.googleapis.com/
Diff:
@@ -1 +1 @@
-/^monitoring.googleapis.com/
+""none""


",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.8.1-authn-authz,[AUTHN-AUTHZ] Ensure Basic Authentication using static passwords is Disabled,Disable Basic Authentication (basic auth) for API server authentication as it uses static passwords which need to be rotated.,"default: Disable Basic Authentication (basic auth) for API server authentication as it uses static passwords which need to be rotated.

rationale: Basic Authentication allows a user to authenticate to a Kubernetes cluster with a username and static password which is stored in plaintext (without any encryption). Disabling Basic Authentication will prevent attacks like brute force and credential stuffing. It is recommended to disable Basic Authentication and instead use another authentication method such as OpenID Connect.

  GKE manages authentication via gcloud using the OpenID Connect token method, setting up the Kubernetes configuration, getting an access token, and keeping it up to date. This means Basic Authentication using static passwords and Client Certificate authentication, which both require additional management overhead of key management and rotation, are not necessary and should be disabled.

  When Basic Authentication is disabled, you will still be able to authenticate to the cluster with other authentication methods, such as OpenID Connect tokens. See also Recommendation 5.8.2 to disable authentication using Client Certificates.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Basic Authentication using static passwords is Disabled""

    desc 'Disable Basic Authentication (basic auth) for API server authentication as it uses static passwords which need to be rotated.'
    desc 'rationale', ""Basic Authentication allows a user to authenticate to a Kubernetes cluster with a username and static password which is stored in plaintext (without any encryption). Disabling Basic Authentication will prevent attacks like brute force and credential stuffing. It is recommended to disable Basic Authentication and instead use another authentication method such as OpenID Connect.

  GKE manages authentication via gcloud using the OpenID Connect token method, setting up the Kubernetes configuration, getting an access token, and keeping it up to date. This means Basic Authentication using static passwords and Client Certificate authentication, which both require additional management overhead of key management and rotation, are not necessary and should be disabled.

  When Basic Authentication is disabled, you will still be able to authenticate to the cluster with other authentication methods, such as OpenID Connect tokens. See also Recommendation 5.8.2 to disable authentication using Client Certificates.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/iam-integration'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('master_auth.username') { should cmp nil }
        # master_auth.password should also be nil, but we don't want to put that sensitive info in the output
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 master_auth.username is expected to cmp == nil

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.8.2-authn-authz,[AUTHN-AUTHZ] Ensure authentication using Client Certificates is Disabled,"Disable Client Certificates, which require certificate rotation, for authentication. Instead, use another authentication method like OpenID Connect.","default: Disable Client Certificates, which require certificate rotation, for authentication. Instead, use another authentication method like OpenID Connect.

rationale: With Client Certificate authentication, a client presents a certificate that the API server verifies with the specified Certificate Authority. In GKE, Client Certificates are signed by the cluster root Certificate Authority. When retrieved, the Client Certificate is only base64 encoded and not encrypted.

  GKE manages authentication via gcloud for you using the OpenID Connect token method, setting up the Kubernetes configuration, getting an access token, and keeping it up to date. This means Basic Authentication using static passwords and Client Certificate authentication, which both require additional management overhead of key management and rotation, are not necessary and should be disabled.

  When Client Certificate authentication is disabled, you will still be able to authenticate to the cluster with other authentication methods, such as OpenID Connect tokens. See also Recommendation 6.8.1 to disable authentication using static passwords, known as Basic Authentication.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure authentication using Client Certificates is Disabled""

    desc 'Disable Client Certificates, which require certificate rotation, for authentication. Instead, use another authentication method like OpenID Connect.'
    desc 'rationale', ""With Client Certificate authentication, a client presents a certificate that the API server verifies with the specified Certificate Authority. In GKE, Client Certificates are signed by the cluster root Certificate Authority. When retrieved, the Client Certificate is only base64 encoded and not encrypted.

  GKE manages authentication via gcloud for you using the OpenID Connect token method, setting up the Kubernetes configuration, getting an access token, and keeping it up to date. This means Basic Authentication using static passwords and Client Certificate authentication, which both require additional management overhead of key management and rotation, are not necessary and should be disabled.

  When Client Certificate authentication is disabled, you will still be able to authenticate to the cluster with other authentication methods, such as OpenID Connect tokens. See also Recommendation 6.8.1 to disable authentication using static passwords, known as Basic Authentication.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#restrict_authn_methods'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"", :sensitive do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('master_auth.client_certificate') { should cmp nil }
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 master_auth.client_certificate is expected to cmp == nil

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.8.4-authn-authz,[AUTHN-AUTHZ] Ensure Legacy Authorization (ABAC) is Disabled,"Legacy Authorization, also known as Attribute-Based Access Control (ABAC) has been superseded by Role-Based Access Control (RBAC) and is not under active development. RBAC is the recommended way to manage permissions in Kubernetes.","default: Legacy Authorization, also known as Attribute-Based Access Control (ABAC) has been superseded by Role-Based Access Control (RBAC) and is not under active development. RBAC is the recommended way to manage permissions in Kubernetes.

rationale: In Kubernetes, RBAC is used to grant permissions to resources at the cluster and namespace level. RBAC allows you to define roles with rules containing a set of permissions, whilst the legacy authorizer (ABAC) in Kubernetes Engine grants broad, statically defined permissions. As RBAC provides significant security advantages over ABAC, it is recommended option for access control. Where possible, legacy authorization must be disabled for GKE clusters.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Legacy Authorization (ABAC) is Disabled""

    desc 'Legacy Authorization, also known as Attribute-Based Access Control (ABAC) has been superseded by Role-Based Access Control (RBAC) and is not under active development. RBAC is the recommended way to manage permissions in Kubernetes.'
    desc 'rationale', 'In Kubernetes, RBAC is used to grant permissions to resources at the cluster and namespace level. RBAC allows you to define roles with rules containing a set of permissions, whilst the legacy authorizer (ABAC) in Kubernetes Engine grants broad, statically defined permissions. As RBAC provides significant security advantages over ABAC, it is recommended option for access control. Where possible, legacy authorization must be disabled for GKE clusters.'

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control'
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your- cluster#leave_abac_disabled_default_for_110'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('legacy_abac.enabled') { should cmp nil }
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 legacy_abac.enabled is expected to cmp == nil

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.10.1-other,[OTHER] Ensure Kubernetes Web UI is Disabled,The Kubernetes Web UI (Dashboard) has been a historical source of vulnerability and should only be deployed when necessary.,"default: The Kubernetes Web UI (Dashboard) has been a historical source of vulnerability and should only be deployed when necessary.

rationale: You should disable the Kubernetes Web UI (Dashboard) when running on Kubernetes Engine. The Kubernetes Web UI is backed by a highly privileged Kubernetes Service Account.

  The Google Cloud Console provides all the required functionality of the Kubernetes Web UI and leverages Cloud IAM to restrict user access to sensitive cluster controls and settings.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Kubernetes Web UI is Disabled""

    desc 'The Kubernetes Web UI (Dashboard) has been a historical source of vulnerability and should only be deployed when necessary.'
    desc 'rationale', ""You should disable the Kubernetes Web UI (Dashboard) when running on Kubernetes Engine. The Kubernetes Web UI is backed by a highly privileged Kubernetes Service Account.

  The Google Cloud Console provides all the required functionality of the Kubernetes Web UI and leverages Cloud IAM to restrict user access to sensitive cluster controls and settings.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/hardening-your-cluster#disable_kubernetes_dashboard'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        # TODO: Inspec-GCP support needed
        its('addons_config.kubernetes_dashboard.disabled') { should cmp true }
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 addons_config.kubernetes_dashboard.disabled is expected to cmp == true

",False,{}
inspec-gke-cis-gcp_report.json,Passed,cis-gke-5.10.2-other,[OTHER] Ensure that Alpha clusters are not used for production workloads,Alpha clusters are not covered by an SLA and are not production-ready.,"default: Alpha clusters are not covered by an SLA and are not production-ready.

rationale: Alpha clusters are designed for early adopters to experiment with workloads that take
    advantage of new features before those features are production-ready. They have all
    Kubernetes API features enabled, but are not covered by the GKE SLA, do not receive
    security updates, have node auto-upgrade and node auto-repair disabled, and cannot be
    upgraded. They are also automatically deleted after 30 days.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure that Alpha clusters are not used for production workloads""

    desc 'Alpha clusters are not covered by an SLA and are not production-ready.'
    desc 'rationale', ""Alpha clusters are designed for early adopters to experiment with workloads that take
    advantage of new features before those features are production-ready. They have all
    Kubernetes API features enabled, but are not covered by the GKE SLA, do not receive
    security updates, have node auto-upgrade and node auto-repair disabled, and cannot be
    upgraded. They are also automatically deleted after 30 days.""

    tag cis_scored: true
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/concepts/alpha-clusters'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('enable_kubernetes_alpha') { should eq nil }
      end
    end
  end",,,UM-1,,"PASSED -- Test: [tigera-tesla] Cluster us-central1/ops-01 enable_kubernetes_alpha is expected to eq nil

",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.10.3-other,[OTHER] Ensure Pod Security Policy is Enabled and set as appropriate,Pod Security Policy should be used to prevent privileged containers where possible and enforce namespace and workload configurations.,"default: Pod Security Policy should be used to prevent privileged containers where possible and enforce namespace and workload configurations.

rationale: A Pod Security Policy is a cluster-level resource that controls security sensitive aspects of the pod specification. A PodSecurityPolicy object defines a set of conditions that a pod must run with in order to be accepted into the system, as well as defaults for the related fields. When a request to create or update a Pod does not meet the conditions in the Pod Security Policy, that request is rejected and an error is returned. The Pod Security Policy admission controller validates requests against available Pod Security Policies.

  PodSecurityPolicies specify a list of restrictions, requirements, and defaults for Pods created under the policy. See further details on recommended policies in Recommendation section 5.2.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure Pod Security Policy is Enabled and set as appropriate""

    desc 'Pod Security Policy should be used to prevent privileged containers where possible and enforce namespace and workload configurations.'
    desc 'rationale', ""A Pod Security Policy is a cluster-level resource that controls security sensitive aspects of the pod specification. A PodSecurityPolicy object defines a set of conditions that a pod must run with in order to be accepted into the system, as well as defaults for the related fields. When a request to create or update a Pod does not meet the conditions in the Pod Security Policy, that request is rejected and an error is returned. The Pod Security Policy admission controller validates requests against available Pod Security Policies.

  PodSecurityPolicies specify a list of restrictions, requirements, and defaults for Pods created under the policy. See further details on recommended policies in Recommendation section 5.2.""

    tag cis_scored: false
    tag cis_level: 1
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/kubernetes-engine/docs/how-to/pod-security-policies'
    ref 'GCP Docs', url: 'https://kubernetes.io/docs/concepts/policy/pod-security-policy'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name], beta: true) }
        # TODO: Inspec-GCP support
        its('pod_security_policy_config.enabled') { should cmp true }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 pod_security_policy_config.enabled is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
inspec-gke-cis-gcp_report.json,Failed,cis-gke-5.10.5-other,[OTHER] Ensure use of Binary Authorization,Binary Authorization helps to protect supply-chain security by only allowing images with verifiable cryptographically signed metadata into the cluster.,"default: Binary Authorization helps to protect supply-chain security by only allowing images with verifiable cryptographically signed metadata into the cluster.

rationale: Binary Authorization provides software supply-chain security for images that you deploy to GKE from Google Container Registry (GCR) or another container image registry.
    Binary Authorization requires images to be signed by trusted authorities during the development process. These signatures are then validated at deployment time. By
    enforcing validation, you can gain tighter control over your container environment by ensuring only verified images are integrated into the build-and-release process.

",0.4,medium,"=========================================================
# Profile name: inspec-gke-cis-gcp
=========================================================

  control ""cis-gke-#{sub_control_id}-#{control_abbrev}"" do
    impact 'medium'

    title ""[#{control_abbrev.upcase}] Ensure use of Binary Authorization""

    desc 'Binary Authorization helps to protect supply-chain security by only allowing images with verifiable cryptographically signed metadata into the cluster.'
    desc 'rationale', ""Binary Authorization provides software supply-chain security for images that you deploy to GKE from Google Container Registry (GCR) or another container image registry.
    Binary Authorization requires images to be signed by trusted authorities during the development process. These signatures are then validated at deployment time. By
    enforcing validation, you can gain tighter control over your container environment by ensuring only verified images are integrated into the build-and-release process.""

    tag cis_scored: true
    tag cis_level: 2
    tag cis_gke: sub_control_id.to_s
    tag cis_version: cis_version.to_s
    tag project: gcp_project_id.to_s

    ref 'CIS Benchmark', url: cis_url.to_s
    ref 'GCP Docs', url: 'https://cloud.google.com/binary-authorization/'

    gke_clusters.each do |gke_cluster|
      describe ""[#{gcp_project_id}] Cluster #{gke_cluster[:location]}/#{gke_cluster[:cluster_name]}"" do
        subject { google_container_cluster(project: gcp_project_id, location: gke_cluster[:location], name: gke_cluster[:cluster_name]) }
        its('binary_authorization.enabled') { should cmp true }
      end
    end
  end",,,UM-1,,"FAILED -- Test: [tigera-tesla] Cluster us-central1/ops-01 binary_authorization.enabled is expected to cmp == true
Message: 
expected: true
     got: 

(compared using `cmp` matcher)


",False,{}
